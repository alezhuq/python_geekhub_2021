by,id,score,time,title,type,descendants,kids,text,url
petems,30100077,30,1643288976,Show HN: Open-source admin panel for Supabase,story,8,"[30100215, 30100836, 30100599, 30100861]",None,https://www.getmotoradmin.com/supabase
topcat31,30089895,212,1643222791,Show HN: Electric Tables – an experiment in personal databases,story,36,"[30093410, 30090654, 30091834, 30091277, 30093401, 30093280, 30091475, 30097507, 30092841, 30095935, 30092043, 30095831, 30096513, 30091521, 30096291, 30090678, 30093407, 30096701, 30090131, 30093260, 30091411, 30094759]",None,https://tomcritchlow.com/2022/01/26/electric-tables/
mattdesl,30088537,77,1643218049,Show HN: Simple Zero-Knowledge Proof Treasure Hunt Game,story,37,"[30091973, 30098023, 30090943, 30094432, 30093268, 30093204, 30091534, 30090368]",None,https://zk-treasure-hunt.glitch.me/
hkh,30086789,109,1643211599,Show HN: Infracost (YC W21) – Open-source cloud cost policies,story,23,"[30096806, 30089264, 30087927, 30093255, 30092032, 30088211, 30087885, 30087800, 30088636, 30089052, 30086801]","Hi, we’re Ali, Hassan and Alistair, co-founders of Infracost (<a href=""https:&#x2F;&#x2F;www.infracost.io&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;www.infracost.io&#x2F;</a>). Infracost shows engineers the cost of each Terraform change in CI&#x2F;CD before resources are launched. When something changes, it posts a comment with the cloud cost impact. e.g. you’ve added 2 instances and volumes, and have changed an instance type from medium to large, this will increase your bill by 25% next month from $1000 to $1250 per month.<p>We launched the first version of Infracost just under a year ago (<a href=""https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=26064588"" rel=""nofollow"">https:&#x2F;&#x2F;news.ycombinator.com&#x2F;item?id=26064588</a>). As we said in our first release ‘the people who are purchasing cloud resources are not shown costs upfront, so they don’t know how much the resources will cost before launching them’. Our assumption was that because we are open source and engineers are flying blind, they (the engineers) would pull us into their workflow. Actually, something different is happening:<p>The engineers are not pulling us in - it turns out to be the senior DevOps, SREs and platform teams. One of their challenges is figuring out how their small team of 7 people can fulfill the infrastructure requirements of hundreds of engineers. To solve this, they have created and put in place processes for engineers to provision infrastructure when they need. Now they want to implement cost policies and guardrails so that these hundreds of engineers don’t blow past all budgets. For example, if a change will result in a higher than 15% increase, leave a warning. If a change results in a &gt;25% increase in costs, block the change till a team lead has reviewed it.<p>This has two implications for us. First, we need to create an output that isn’t only used by humans but is also digested into other systems to make further decisions. The second is the people we have been speaking to are not our end users. We need to figure out how we can get introduced to our end users, and create a different set of questions for each persona.<p>We’d really love your feedback around the cost policies use-case. We&#x27;ve created examples with standard policy tools like Open Policy Agent (OPA), HashiCorp Sentinel and Conftest.  Check out the repo for GitHub Actions at <a href=""https:&#x2F;&#x2F;github.com&#x2F;infracost&#x2F;infracost"" rel=""nofollow"">https:&#x2F;&#x2F;github.com&#x2F;infracost&#x2F;infracost</a>. Our other CI&#x2F;CD integrations are listed here: <a href=""https:&#x2F;&#x2F;www.infracost.io&#x2F;docs&#x2F;#4-add-to-cicd"" rel=""nofollow"">https:&#x2F;&#x2F;www.infracost.io&#x2F;docs&#x2F;#4-add-to-cicd</a>.<p>We&#x27;d love to hear how you think about policies and guardrails for containing cloud costs!",https://github.com/infracost/infracost
Dave3of5,30099207,2,1643283430,Show HN: GravaMetrics – Powerful Dashboards made simple,story,1,[30099242],None,https://gravametrics.com/
ajusa,30085760,110,1643207207,"Show HN: A simple Wordle clone in 60 lines, using Hyperscript",story,49,"[30086083, 30087007, 30087380, 30086516, 30089334, 30093618, 30086470, 30086870, 30089972, 30092317, 30091948, 30089499, 30086082, 30089092, 30093136, 30085947, 30091552, 30088209, 30085807, 30090028, 30088566]","Hello HN!
I&#x27;ve been playing a lot with <a href=""https:&#x2F;&#x2F;hyperscript.org&#x2F;"" rel=""nofollow"">https:&#x2F;&#x2F;hyperscript.org&#x2F;</a> recently (not to be confused with the other hyperhype hyperscript). I threw together a quick Wordle clone in an evening to see what it would look like using this language. The main functionality that is missing is checking for invalid words. The word dictionary is also very small, so it&#x27;s very easy.<p>The goal here wasn&#x27;t really to create a good version of Wordle, it was to build 80% of Wordle in a different language to see what it looks like. Turns out, it looks pretty good! Stuff like using CSS rule precedence to highlight the squares, CSS selectors to figure out which key to highlight, and using the DOM to keep state are all really natural in Hyperscript. I highly suggest going to the site and viewing the source!",https://arhamjain.com/hyperwordle/
dmoura,30074787,101,1643131798,Show HN: SPyQL – SQL with Python in the middle,story,24,"[30085675, 30090683, 30086953, 30086975, 30085552, 30086285, 30086284, 30086655, 30092326, 30085665, 30089880, 30089649]","SPyQL (<a href=""https:&#x2F;&#x2F;github.com&#x2F;dcmoura&#x2F;spyql"" rel=""nofollow"">https:&#x2F;&#x2F;github.com&#x2F;dcmoura&#x2F;spyql</a>) is SQL with Python in the middle, an open-source project fully written in Python for making command-line data processing more intuitive, readable and powerful. Try mixing in the same pot: a SQL SELECT for providing the structure, Python expressions for defining transformations and conditions, the essence of awk as a data-processing language, and the JSON handling capabilities of jq.<p>How does a SPyQL query looks like?<p><pre><code>  $ spyql “
    IMPORT pendulum AS p 
    SELECT
        (p.now() - p.from_timestamp(purchase_ts)).in_days() AS days_ago,
        sum_agg(price * quantity) AS total
    FROM csv
    WHERE department.upper() == &#x27;IT&#x27; and purchase_ts is not Null
    GROUP BY 1
    ORDER BY 1
    TO json” &lt; my_purchases.csv
</code></pre>
In a single statement we are 1) reading a CSV (of purchases) with automatic header detection, dialect detection, type inference and casting, 2) filtering out records that do not belong to the IT department or do not have a purchase timestamp 3) summing the total purchases and grouping by how many days ago they happened, 4) sorting from the most to the least recent day and 5) writing the result in JSON format. All this without loading the full dataset into memory.<p>The Readme is loaded with recipes and there is also a demo video: <a href=""https:&#x2F;&#x2F;vimeo.com&#x2F;danielcmoura&#x2F;spyqldemo"" rel=""nofollow"">https:&#x2F;&#x2F;vimeo.com&#x2F;danielcmoura&#x2F;spyqldemo</a><p>Any feedback is welcomed! Thank you.",https://github.com/dcmoura/spyql
